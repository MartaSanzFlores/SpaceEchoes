security:
    # enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # configuration authentification
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # api access securisé avec jwt
        api_secure:
           pattern: ^/api/secure
           stateless: true
           jwt: ~

        api_public:
           pattern: ^/api
           stateless: true
           
        api_logout: # Firewall pour la route api logout
            pattern: ^/api/logout
            stateless: true
            logout:
                path: /api/logout
    
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            # Firewall pour route back-office logout
            logout:
                path: back_logout
                target: back_login # Redirection a la page login back-office aprés la deconnexion
            
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/secure, roles: IS_AUTHENTICATED_FULLY } # indique que aux routes qui commencent par /api/secure nécéssite une authentification
        - { path: ^/api, roles: PUBLIC_ACCESS } # indique que l'accès a la route /api est publique
        - { path: ^/back/login, roles: PUBLIC_ACCESS } # indique que l'accès a la route /back/login est public
        - { path: ^/back/users, roles: ROLE_ADMIN } # indique que l'accès a la route /back/users (ajout, modification/ suppression)est accesible que avec le role administrateur
        - { path: ^/back/, roles: ROLE_MANAGER } # indique que l'accès a la route /back est accesible que avec le role manager et administrateur(hiérarchie)

     # on décide de faire hériter tous les rôles en cascade
    role_hierarchy:
        ROLE_ADMIN: ROLE_MANAGER
        ROLE_MANAGER: ROLE_USER
    # ADMIN aura les rôles MANAGER et USER
    # MANAGER aura aussi le rôle USER   
        

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
